// Code generated by protoc-gen-as. DO NOT EDIT.
// Versions:
//   protoc-gen-as v1.3.3

import { Writer, Reader } from "as-proto/assembly";
import { SingleSignature } from "./SingleSignature";
import { MultiSignature } from "./MultiSignature";

export class Signer {
  static encode(message: Signer, writer: Writer): void {
    const single = message.single;
    if (single !== null) {
      writer.uint32(10);
      writer.fork();
      SingleSignature.encode(single, writer);
      writer.ldelim();
    }

    const multisig = message.multisig;
    if (multisig !== null) {
      writer.uint32(18);
      writer.fork();
      MultiSignature.encode(multisig, writer);
      writer.ldelim();
    }
  }

  static decode(reader: Reader, length: i32): Signer {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new Signer();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.single = SingleSignature.decode(reader, reader.uint32());
          break;

        case 2:
          message.multisig = MultiSignature.decode(reader, reader.uint32());
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  single: SingleSignature | null;
  multisig: MultiSignature | null;

  constructor(
    single: SingleSignature | null = null,
    multisig: MultiSignature | null = null
  ) {
    this.single = single;
    this.multisig = multisig;
  }
}
