// Code generated by protoc-gen-as. DO NOT EDIT.
// Versions:
//   protoc-gen-as v1.3.3

import { Writer, Reader } from "as-proto/assembly";
import { InitializeMintInstruction } from "./InitializeMint/InitializeMintInstruction";
import { InitializeMintAccounts } from "./InitializeMint/InitializeMintAccounts";
import { InitializeMintVersion } from "./InitializeMint/InitializeMintVersion";

export class InitializeMint {
  static encode(message: InitializeMint, writer: Writer): void {
    writer.uint32(8);
    writer.int32(message.version);

    const instruction = message.instruction;
    if (instruction !== null) {
      writer.uint32(18);
      writer.fork();
      InitializeMintInstruction.encode(instruction, writer);
      writer.ldelim();
    }

    const accounts = message.accounts;
    if (accounts !== null) {
      writer.uint32(26);
      writer.fork();
      InitializeMintAccounts.encode(accounts, writer);
      writer.ldelim();
    }
  }

  static decode(reader: Reader, length: i32): InitializeMint {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new InitializeMint();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.version = reader.int32();
          break;

        case 2:
          message.instruction = InitializeMintInstruction.decode(
            reader,
            reader.uint32()
          );
          break;

        case 3:
          message.accounts = InitializeMintAccounts.decode(
            reader,
            reader.uint32()
          );
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  version: InitializeMintVersion;
  instruction: InitializeMintInstruction | null;
  accounts: InitializeMintAccounts | null;

  constructor(
    version: InitializeMintVersion = 0,
    instruction: InitializeMintInstruction | null = null,
    accounts: InitializeMintAccounts | null = null
  ) {
    this.version = version;
    this.instruction = instruction;
    this.accounts = accounts;
  }
}
