// Code generated by protoc-gen-as. DO NOT EDIT.
// Versions:
//   protoc-gen-as v1.3.3

import { Writer, Reader } from "as-proto/assembly";
import { Transfer } from "./Transfer";
import { InitializeMint } from "./InitializeMint";
import { InitializeImmutableOwner } from "./InitializeImmutableOwner";
import { InitializeAccount } from "./InitializeAccount";
import { InitializeMultisig } from "./InitializeMultisig";
import { Approve } from "./Approve";
import { MintTo } from "./MintTo";
import { Revoke } from "./Revoke";
import { SetAuthority } from "./SetAuthority";
import { Burn } from "./Burn";
import { CloseAccount } from "./CloseAccount";
import { FreezeAccount } from "./FreezeAccount";
import { ThawAccount } from "./ThawAccount";
import { SyncNative } from "./SyncNative";

export class Event {
  static encode(message: Event, writer: Writer): void {
    const transfer = message.transfer;
    if (transfer !== null) {
      writer.uint32(82);
      writer.fork();
      Transfer.encode(transfer, writer);
      writer.ldelim();
    }

    const initializeMint = message.initializeMint;
    if (initializeMint !== null) {
      writer.uint32(90);
      writer.fork();
      InitializeMint.encode(initializeMint, writer);
      writer.ldelim();
    }

    const initializeImmutableOwner = message.initializeImmutableOwner;
    if (initializeImmutableOwner !== null) {
      writer.uint32(98);
      writer.fork();
      InitializeImmutableOwner.encode(initializeImmutableOwner, writer);
      writer.ldelim();
    }

    const initializeAccount = message.initializeAccount;
    if (initializeAccount !== null) {
      writer.uint32(106);
      writer.fork();
      InitializeAccount.encode(initializeAccount, writer);
      writer.ldelim();
    }

    const initializeMultisig = message.initializeMultisig;
    if (initializeMultisig !== null) {
      writer.uint32(114);
      writer.fork();
      InitializeMultisig.encode(initializeMultisig, writer);
      writer.ldelim();
    }

    const approve = message.approve;
    if (approve !== null) {
      writer.uint32(122);
      writer.fork();
      Approve.encode(approve, writer);
      writer.ldelim();
    }

    const mintTo = message.mintTo;
    if (mintTo !== null) {
      writer.uint32(130);
      writer.fork();
      MintTo.encode(mintTo, writer);
      writer.ldelim();
    }

    const revoke = message.revoke;
    if (revoke !== null) {
      writer.uint32(138);
      writer.fork();
      Revoke.encode(revoke, writer);
      writer.ldelim();
    }

    const setAuthority = message.setAuthority;
    if (setAuthority !== null) {
      writer.uint32(146);
      writer.fork();
      SetAuthority.encode(setAuthority, writer);
      writer.ldelim();
    }

    const burn = message.burn;
    if (burn !== null) {
      writer.uint32(154);
      writer.fork();
      Burn.encode(burn, writer);
      writer.ldelim();
    }

    const closeAccount = message.closeAccount;
    if (closeAccount !== null) {
      writer.uint32(162);
      writer.fork();
      CloseAccount.encode(closeAccount, writer);
      writer.ldelim();
    }

    const freezeAccount = message.freezeAccount;
    if (freezeAccount !== null) {
      writer.uint32(178);
      writer.fork();
      FreezeAccount.encode(freezeAccount, writer);
      writer.ldelim();
    }

    const thawAccount = message.thawAccount;
    if (thawAccount !== null) {
      writer.uint32(186);
      writer.fork();
      ThawAccount.encode(thawAccount, writer);
      writer.ldelim();
    }

    const syncNative = message.syncNative;
    if (syncNative !== null) {
      writer.uint32(194);
      writer.fork();
      SyncNative.encode(syncNative, writer);
      writer.ldelim();
    }

    writer.uint32(810);
    writer.string(message.txnId);

    writer.uint32(816);
    writer.uint64(message.blockHeight);

    writer.uint32(824);
    writer.int64(message.blockTimestamp);

    writer.uint32(834);
    writer.string(message.blockHash);

    writer.uint32(848);
    writer.uint32(message.instructionIndex);
  }

  static decode(reader: Reader, length: i32): Event {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new Event();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 10:
          message.transfer = Transfer.decode(reader, reader.uint32());
          break;

        case 11:
          message.initializeMint = InitializeMint.decode(
            reader,
            reader.uint32()
          );
          break;

        case 12:
          message.initializeImmutableOwner = InitializeImmutableOwner.decode(
            reader,
            reader.uint32()
          );
          break;

        case 13:
          message.initializeAccount = InitializeAccount.decode(
            reader,
            reader.uint32()
          );
          break;

        case 14:
          message.initializeMultisig = InitializeMultisig.decode(
            reader,
            reader.uint32()
          );
          break;

        case 15:
          message.approve = Approve.decode(reader, reader.uint32());
          break;

        case 16:
          message.mintTo = MintTo.decode(reader, reader.uint32());
          break;

        case 17:
          message.revoke = Revoke.decode(reader, reader.uint32());
          break;

        case 18:
          message.setAuthority = SetAuthority.decode(reader, reader.uint32());
          break;

        case 19:
          message.burn = Burn.decode(reader, reader.uint32());
          break;

        case 20:
          message.closeAccount = CloseAccount.decode(reader, reader.uint32());
          break;

        case 22:
          message.freezeAccount = FreezeAccount.decode(reader, reader.uint32());
          break;

        case 23:
          message.thawAccount = ThawAccount.decode(reader, reader.uint32());
          break;

        case 24:
          message.syncNative = SyncNative.decode(reader, reader.uint32());
          break;

        case 101:
          message.txnId = reader.string();
          break;

        case 102:
          message.blockHeight = reader.uint64();
          break;

        case 103:
          message.blockTimestamp = reader.int64();
          break;

        case 104:
          message.blockHash = reader.string();
          break;

        case 106:
          message.instructionIndex = reader.uint32();
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  transfer: Transfer | null;
  initializeMint: InitializeMint | null;
  initializeImmutableOwner: InitializeImmutableOwner | null;
  initializeAccount: InitializeAccount | null;
  initializeMultisig: InitializeMultisig | null;
  approve: Approve | null;
  mintTo: MintTo | null;
  revoke: Revoke | null;
  setAuthority: SetAuthority | null;
  burn: Burn | null;
  closeAccount: CloseAccount | null;
  freezeAccount: FreezeAccount | null;
  thawAccount: ThawAccount | null;
  syncNative: SyncNative | null;
  txnId: string;
  blockHeight: u64;
  blockTimestamp: i64;
  blockHash: string;
  instructionIndex: u32;

  constructor(
    transfer: Transfer | null = null,
    initializeMint: InitializeMint | null = null,
    initializeImmutableOwner: InitializeImmutableOwner | null = null,
    initializeAccount: InitializeAccount | null = null,
    initializeMultisig: InitializeMultisig | null = null,
    approve: Approve | null = null,
    mintTo: MintTo | null = null,
    revoke: Revoke | null = null,
    setAuthority: SetAuthority | null = null,
    burn: Burn | null = null,
    closeAccount: CloseAccount | null = null,
    freezeAccount: FreezeAccount | null = null,
    thawAccount: ThawAccount | null = null,
    syncNative: SyncNative | null = null,
    txnId: string = "",
    blockHeight: u64 = 0,
    blockTimestamp: i64 = 0,
    blockHash: string = "",
    instructionIndex: u32 = 0
  ) {
    this.transfer = transfer;
    this.initializeMint = initializeMint;
    this.initializeImmutableOwner = initializeImmutableOwner;
    this.initializeAccount = initializeAccount;
    this.initializeMultisig = initializeMultisig;
    this.approve = approve;
    this.mintTo = mintTo;
    this.revoke = revoke;
    this.setAuthority = setAuthority;
    this.burn = burn;
    this.closeAccount = closeAccount;
    this.freezeAccount = freezeAccount;
    this.thawAccount = thawAccount;
    this.syncNative = syncNative;
    this.txnId = txnId;
    this.blockHeight = blockHeight;
    this.blockTimestamp = blockTimestamp;
    this.blockHash = blockHash;
    this.instructionIndex = instructionIndex;
  }
}
